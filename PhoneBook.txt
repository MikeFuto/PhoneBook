package com.claim;

import java.util.Arrays;

public class PhoneBook {

	private String  cityName;
	public Person[] personList = new Person[0];
	private String temp ="";
		//public Person nextPersonF = new Person();

//---------------------------------------------------------constructors
	public PhoneBook() {}	

	public PhoneBook(String cityName, Person[] personList) {}
	
	
//..........................................................Methods

/**			//Modifier: 	public 
			//Return type: 	void
			//Method name: 	getAddAPerson
			//Parameters: 	inputStringData
			//Purpose: 		add an object to the array of customers
*/		
		//adding a customer with a formatted input string of information
	public void getAddAPerson(String inputStringData){
		
		String itempInputString = "";

		String[] arrOfStr = inputStringData.split(", "); 

        String age =  			arrOfStr[1];
      
        String streetAddress =  arrOfStr[3];
        String cityAddress =  	arrOfStr[4];
        String stateAddress =  	arrOfStr[5];
        String zipAddress =  	arrOfStr[6];
		
        String parsedTelephone = preparePhoneNum(arrOfStr[2]);
        
		String parsedName = getParseName(arrOfStr[0]);
		
		String[] arrOfStr1 = parsedName.split(","); 
		String firstName =  	arrOfStr1[0];
        String lastName =  		arrOfStr1[1];
		
		//--------------------------------------------------------------------	
    				
        	//This is the next data to be added:
		String nextPerson = (firstName+ " " +lastName+ " " + age  + " " +  parsedTelephone + " " + streetAddress  + " " + cityAddress  + " " + stateAddress + " " + zipAddress);	
    		//This is the next person to be added:
		Person nextPersonF = new Person (firstName , lastName , age , parsedTelephone , streetAddress , cityAddress , stateAddress , zipAddress);
			
        	//set up temp array one larger than established list  
        Person[] personArrayTemp = new Person[personList.length+1];
       
        	//creating temporary array to hold old contents plus new record of person 
        int i = 0;
        for (i=0; i<personList.length; i++){
        	personArrayTemp[i] = personList[i]; 
        }
        	//add new person to the new list array and print for confirmation
        personArrayTemp[personArrayTemp.length -1] = nextPersonF;
        System.out.println("new person is "+ nextPersonF);
        
        	//copy contents of the updated temp back into the new original list of customers
        personList = new Person[personArrayTemp.length];
        personList = personArrayTemp;          

        System.out.println("person list length....."+ personList.length);
        System.out.println(" ");
	}
	
	//--------------------------------------------------------------------------..........................................................	

	//--------------------------------------------------------------------------...........................................	
	
/**	//Modifier: 	public 
	//Return type: 	void
	// Method name: getSearchACustomerTele
	//Parameters: 	unformatted phone number		newTelephone
	//Purpose: 		search and print for customer by telephone #		
*/	
	
	public void getSearchACustomerTele(String newTelephone) {

			//Prepare phone number
        String parsedTelephone = preparePhoneNum(newTelephone);
		
		System.out.println("list length and phone # to find is : " + personList.length + " " +newTelephone + " " + parsedTelephone);
				
			//search through it first to see if this phone # exists
		int peopleFound = 0;	
		if (personList.length != 0 ) {
			int i=0;
			for (i=0; i < personList.length; i++) {
					
					//Check for a match with telephone #
				if ( parsedTelephone.equals(personList[i].getTelephone()) ) {
		
					System.out.println(" ");
					System.out.println("The record to phone# " + personList[i].getTelephone() + " is: " + personList[i]);			
					peopleFound++;
				}
			}
		}
		System.out.println("peopleFound with matching phone# is : " + peopleFound);
		System.out.println(" ");			
	}		
	
	//--------------------------------------------------------------------------...........................................	

	//--------------------------------------------------------------------------...........................................	
		
	
/**	//Modifier: 	public
	//Return type: 	void
	// Method name: getSearchFullName
	//Parameters: 	inputName
	//Purpose: 		print a list of customers by full name 		#3 ok
*/	
	
	public void getSearchFullName(String inFirstName, String inLastName) {   

		String firstName = "";
        String lastName =  "";
		
		//Go through the string and delete spaces on first name		
		String newWord = "";
		char toSearchFor = ' ';
		for (int k = 0 ; k<inFirstName.length() ; k++) { 
					
				if (toSearchFor == inFirstName.charAt(k)){	}
				else {
					newWord = newWord + inFirstName.charAt(k);
				}
		}
		firstName = newWord;
		
		
		//Go through the string and delete spaces on last name
		newWord = "";
		toSearchFor = ' ';
		for (int k = 0 ; k<inLastName.length() ; k++) { 
					
				if (toSearchFor == inLastName.charAt(k)){	}
				else {
					newWord = newWord + inLastName.charAt(k);
				}
		}
		lastName = newWord;
				
		System.out.println("person to be found is ..." + firstName + " " + lastName+ " out of list of " +  personList.length ) ;

			//search through it first to see if this customer exists
		int peopleFound = 0;	
		if (personList.length != 0 ) {
			int i=0;
			for (i=0; i < personList.length; i++) {
					
						//Check for a match with first and last name
				if ((firstName.equals(personList[i].getFirstName())) && (lastName.equals(personList[i].getLastName()))) {
					System.out.println(" ");
					System.out.println("The records found are  " + personList[i]);					
					peopleFound++;
				}
			}	
		}
		System.out.println("peopleFound with matching full name  is : " + peopleFound);
		System.out.println(" ");					
	}		
	
	//--------------------------------------------------------------------------...........................................	

	//--------------------------------------------------------------------------...........................................		
/**	//Modifier: 	public
	//Return type: 	void
	// Method name: getSearchFirstName
	//Parameters: 	First Name
	//Purpose: 		print a list of customers by first name		#4 ok
*/		
	public void getSearchFirstName(String inFirstName) {    

			//Go through the string and delete spaces		
		String newWord = "";
		char toSearchFor = ' ';
		for (int k = 0 ; k<inFirstName.length() ; k++) { 
					
				if (toSearchFor == inFirstName.charAt(k)){	}
				else {
					newWord = newWord + inFirstName.charAt(k);
				}
		}
		
		inFirstName = newWord;
		System.out.println("Searching for all ..." + inFirstName + " out of list of " +  personList.length ) ;
				
			//search through to see if this customer first name exists
		int peopleFound = 0;	
		if (personList.length != 0 ) {
			int i=0;
			for (i=0; i < personList.length; i++) {
								
					//Check for a match with first name
				if ((inFirstName.equals(personList[i].getFirstName()))) {
					System.out.println(" ");
					System.out.println("The records found are  " + personList[i]);					
					peopleFound++;
				}
			}
					
		}
		System.out.println("peopleFound with matching first name are : " + peopleFound);
		System.out.println(" ");
	}			
	//--------------------------------------------------------------------------...........................................	

	//--------------------------------------------------------------------------...........................................			
/**	//Modifier: 	public
	//Return type: 	void
	// Method name: getSearchLastName
	//Parameters: 	Last Name
	//Purpose: 		print a list of customers by last name			#5 ok
*/	
	
	public void getSearchLastName(String inLastName) { 

		//Go through the string and delete spaces		
		String newWord = "";
		char toSearchFor = ' ';
		for (int k = 0 ; k < inLastName.length() ; k++) { 
			
				if (toSearchFor == inLastName.charAt(k)){	}
				else {
					newWord = newWord + inLastName.charAt(k);
				}
		}

		inLastName = newWord;	
		System.out.println("last name to find........" + inLastName + " out of list of " +  personList.length ) ;
	
			//search through to see if this customer last name exists
		int peopleFound = 0;	
		if (personList.length != 0 ) {
			int i=0;
			for (i=0; i < personList.length; i++) {
								
					//Check for a match with last name
				if ((inLastName.equals(personList[i].getLastName()))) {
					System.out.println(" ");
					System.out.println("The records found are  " + personList[i]);					
					peopleFound++;
				}
			}		
		}
		System.out.println("peopleFound with matching last name are : " + peopleFound);
		System.out.println(" ");
	}			
	
	//--------------------------------------------------------------------------..........................................................	
	//--------------------------------------------------------------------------..........................................................
/**		//Modifier: 	public 
		//Return type: 	void
		// Method name: getUpdateACustomerAddress
		//Parameters: 	String inFNameLName, String inTeleNum, String newStreet,  String newCity, String newState, String newZip
		//Purpose: 		update address info for a customer				#6 meh
	*/							
	public void getUpdateACustomerAddress(String inTeleNum, String newStreet,  String newCity, String newState, String newZip) {	
														
		String parsedTelephone = preparePhoneNum(inTeleNum);
        		
		System.out.println("Phone# to update the Address is ..." + parsedTelephone + " out of " + personList.length) ;
	
		//search through it first to see if this customer even exists
		int peopleFound = 0;	
		if (personList.length != 0 ) {
			int i=0;
			for (i=0; i < personList.length; i++) {
		
				if ( parsedTelephone.equals(personList[i].getTelephone()) ) {
					System.out.println("person to update address was ..." + personList[i]) ;
					peopleFound++;
					personList[i].setStreetAddress(newStreet);
					personList[i].setCityAddress(newCity);
					personList[i].setStateAddress(newState);
					personList[i].setZipAddress(newZip);
					System.out.println("person to update: new address is now  ..." + personList[i]) ;
				}
			}
		}
		System.out.println("peopleFound with matching phone# is : " + peopleFound);
		System.out.println(" ");			
		if (peopleFound == 0) {
			System.out.println("person not found: ");
		}
		System.out.print("Customer update finished: ");
		System.out.println(" ");
	}	
	
	//--------------------------------------------------------------------------..........
	//------------------------------------------------------------------------...........
	/**			//Modifier: 	public 
				//Return type: 	void
				//Method name: 	getPrintAllCustomers
				//Parameters: 	() 
				//Purpose: 		print customers from the array of customers		#7 ok
	*/						 
		public void getPrintAllCustomers() {
			System.out.println("Sorting and printing out all "  + personList.length + " customers ");
			
			if(personList.length != 0) {
					//Arrays.sort(personList);   //by last name		
				Arrays.sort(personList, (a, b) -> a.getLastName().compareTo(b.getLastName()) ) ;
				
					//print entire list
				for (int i = 0 ;  i < personList.length ; i++) {	
					System.out.println("Customer " + i + " is: " +  personList[i]);	
				}	
			}
			else {
				System.out.println("List is empty");
			}
			System.out.println("Sorted and Printed out all Customers: ");
			System.out.println(" ");
			
	}		
			
	//-------------------------------------------------------------..........................................................	
	//-------------------------------------------------------------..........................................................
/**			//Modifier: 	public 
			//Return type: 	void
			//Method name: 	getRemoveAPerson
			//Parameters: 	String inputName, String inputPhone
			//Purpose: 		remove an object from the array of customers		#8 ok
*/		
		
	public void getRemoveAPerson(String inputPhone){
			
		
        String parsedTelephone = preparePhoneNum(inputPhone);
				
		System.out.println("Record to be removed is ..." + parsedTelephone + " out of " + personList.length);
		
			//search through it first to see if this customer exists
		int peopleFound = 0;	
		if (personList.length != 0 ) {
			//int i=0;
			for (int i=0; i < personList.length; i++) {
				
				if ( parsedTelephone.equals(personList[i].getTelephone()) ) {
					peopleFound++;
				}
			}			
		}
		
		if (peopleFound == 0) {
			System.out.println("person not found: ");
		}
		else {	// transfer all records except the selected match to tempArray proper size smaller
			Person[] personArrayTemp = new Person[personList.length-peopleFound];	
			
			int index = 0, i=0;
			for (i=0; i < personList.length; i++) {	
				if ( parsedTelephone.equals(personList[i].getTelephone()) ) {
					System.out.println("person removed was ..." + personList[i]);	
				}
				else { 
					personArrayTemp[index] = personList[i];
					index++;
				}
			}
			
				//copy contents of the updated tempArray back into the new original list of customers
			personList = new Person[personArrayTemp.length];			
			personList = personArrayTemp;
		}		
		System.out.println("The person was removed from list and new personList length is: " + personList.length);	
		System.out.println(" ");
	}

//--------------------------------------------------------------------------	
//------------------parsing -----------------------------------------------     	
//--------------------------------------------------------------------------
	
/**	//Modifier: 	public static
	//Return type: 	String		phoneNumFormat
	//Method name: 	preparePhoneNum
	//Parameters: 	inString  unformatted telephone number 
	//Purpose: 		to return a formatted telephone number	phoneNumFormat
*/			

	public static String preparePhoneNum(String inString) {
		
		String phoneNumFormat = "";
        	//Remove spaces from phone string and format with "(" and ")" and "-"
        String toSearchFor = " ";
        String newString1 = "";
        
        int counter = 0;
     
        //System.out.println("The entered phone number string is : " + inString);				
        				for (int k = 0 ; k < inString.length() ; k++)
        				{
        						//System.out.print(inString.charAt(k) + " "); 	
        					inString.length();
        					if (newString1.length() == 0) {newString1 = newString1 + "(";	}
        					if (newString1.length() == 4) {newString1 = newString1 + ")-";	}			
        					if (newString1.length() == 9) {newString1 = newString1 + "-";	}
        							
        					if (inString.charAt(k) == toSearchFor.charAt(0)) {
        						counter++;
        					}
        					else {
        							//build  new string
        						newString1 = newString1 + inString.charAt(k);
        					}
        				}	
        				phoneNumFormat = newString1;
        
		return phoneNumFormat;
	}
	//--------------------------------------------------------------------------..........................................................
	//--------------------------------------------------------------------------..........................................................	

/**	//Modifier: 	public static
	//Return type: 	String	fullName
	//Method name: 	getParseName
	//Parameters: 	inString  unformatted full name		tempFullName
	//Purpose: 		to return first and last name with a comma between them 	
*/				
	
	public static String getParseName(String tempFullName) {
	
			//Diagnostic prints
			//System.out.println("input string is  ..." + tempFullName);
	
	String tempString = "", middleName = "", fullName = "", Found = "no", testName = "";
	String firstName = "" , secondName = "", thirdName = "", fourthName = "", lastName = "", finished = "no" ;
	int wordsFound = 0; 
	
	for (int i= 0; i < tempFullName.length(); i++) {

			testName  = firstName + "," + secondName + "," + thirdName + "," + fourthName + ","  + lastName;
					
		if (i == (tempFullName.length() - 1)) { finished = "yes";}
		
		if ((tempFullName.charAt(i) != ' ') ) {
			tempString = tempString + tempFullName.charAt(i);
			Found = "yes";	
		}
		else if (((wordsFound == 0 && Found == "yes")) ) {//&& ( (temp.charAt(i -1) != ' ') || (finished == "yes") ) ) {
			firstName = tempString;
			tempString = "";
			Found = "no";
			wordsFound = 1;
		}
		else if (((wordsFound == 1 && Found == "yes"))) {// && ( (temp.charAt(i -1) != ' ') || (finished == "yes") ) ) {
			secondName = tempString;
			tempString = "";
			Found = "no";
			wordsFound = 2;
		}
		else if (((wordsFound == 2 && Found == "yes")) ) {  //&& ( (temp.charAt(i -1) != ' ') || (finished == "yes") ) ) {
			thirdName = tempString;
			tempString = "";
			Found = "no";
			wordsFound = 3;
		}
		else if (((wordsFound == 3 && Found == "yes"))) { // && ( (temp.charAt(i -1) != ' ') || (finished == "yes") ) ) {
			fourthName = tempString;
			tempString = "";
			Found = "no";
			wordsFound = 4;
		}
		else if (((wordsFound == 4 && Found == "yes"))) {// && ( (temp.charAt(i -1) != ' ') || (finished == "yes") ) ) {
			lastName = tempString;
			tempString = "";
			Found = "no";
			wordsFound = 5;
		} 	
	}
	
				// Diagnostic Prints
				//	System.out.println(" ");
				//	testName  = firstName + "," + secondName + "," + thirdName + "," + fourthName + ","  + lastName;
				//	System.out.println("words found & testName = " + wordsFound + " " + testName);
	
	switch (wordsFound)
	{
	case 0:			//no data entered try again
		//System.out.println("Input is all spaces, try again " + wordsFound);
		break;
		
	case 1: 		//only one name found so use first as the last name
		//System.out.println("1 ");
		lastName = firstName;
		firstName = "-";
		break;
		
	case 2:			//only two name found so use second as the last name
		//System.out.println(" 2");
		lastName = secondName;
		secondName = "-";
		break;
		
	case 3:		//only three name found so use third as the last name
		//System.out.println("3 ");
		lastName = thirdName;
		thirdName = "-";
		break;
		
	case 4:			//only four name found so use fourth as the middle name	
		//System.out.println("4 ");
		lastName = fourthName;
		fourthName = "-";
		break;
		
	case 5:			//five name found so use it as is
		//System.out.println("5 ");
		break;
	}
	
	fullName = firstName + "," + lastName;
	middleName = secondName + thirdName + fourthName + " ";
	testName  = firstName + "," + secondName + "," + thirdName + "," + fourthName + ","  + lastName;
	
		//Diagnostic prints
		//System.out.println(" ");
		//System.out.println("test name is  ..." + testName);
		//System.out.println("full name is  ..." + fullName);
		//System.out.println("middle name is  ..." + middleName);
	
	return fullName ; //string of firstName + middleName + lastName or just firstName, LastName
	}		
	
}